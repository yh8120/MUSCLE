<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.app.dao.TrainingLogDao">

	<resultMap id="trainingLog"
		type="com.example.app.domain.TrainingLog">
		<id property="id" column="id" />
		<result property="registered" column="registered" />
		<result property="latitude" column="latitude" />
		<result property="logitude" column="logitude" />
		<association property="user"
			javaType="com.example.app.domain.MUser">
			<id property="id" column="user_id" />
			<result property="name" column="user_name" />
		</association>
		<association property="training"
			javaType="com.example.app.domain.Training">
			<id property="id" column="training_id" />
			<result property="name" column="training_name" />
		</association>
		<collection property="trainingSetList"
			ofType="com.example.app.domain.TrainingSet">
			<id property="id" column="training_set_id" />
			<result property="weight" column="weight" />
			<result property="rep" column="rep" />
			<result property="order" column="set_order" />
			<result property="oneRepMax" column="one_rep_max" />
		</collection>
	</resultMap>
	<resultMap id="messagePayload"
		type="com.example.app.domain.MessagePayload">
		<id property="trainingLogId" column="training_log_id" />
		<result property="userId" column="user_id" />
		<result property="iconPath" column="icon_path" />
		<result property="trainingName" column="training_name" />
		<collection property="trainingSetList"
			ofType="com.example.app.domain.TrainingSet">
			<id property="id" column="training_set_id" />
			<result property="weight" column="weight" />
			<result property="rep" column="rep" />
		</collection>
		<collection property="contributorList" ofType="int">
			<result property="contributor" column="protein_user_id" />
		</collection>
	</resultMap>
	<resultMap id="training"
		type="com.example.app.domain.Training">
		<id property="id" column="id" />
		<result property="name" column="name" />
		<result property="userId" column="user_id" />
		<collection property="trainingLogList"
			ofType="com.example.app.domain.TrainingLog">
			<id property="id" column="training_log_id" />
			<result property="registered" column="registered" />
			<result property="totalWeight" column="total_weight" />
			<result property="oneRepMax" column="one_rep_max" />
			<result property="maxWeight" column="max_weight" />
		</collection>
	</resultMap>

	<select id="findAllbyTrainingId" parameterType="int"
		resultMap="training">
		SELECT
		master_trainings.id,
		master_trainings.name,
		master_trainings.user_id,
		training_logs.id AS training_log_id,
		training_logs.registered,
		training_logs.total_weight,
		training_logs.one_rep_max,
		training_logs.max_weight
		FROM
		master_trainings
		LEFT OUTER JOIN
		(SELECT *
		FROM training_logs
		WHERE
		training_logs.status="ACT"
		)AS training_logs
		ON master_trainings.id =
		training_logs.training_id
		WHERE
		master_trainings.id=${id}
		ORDER BY
		training_logs.registered DESC
	</select>
	<select id="findById" parameterType="int"
		resultMap="trainingLog">
		SELECT
		training_logs.id,training_logs.registered,
		training_logs.user_id,training_logs.training_id,
		training_logs.latitude,training_logs.logitude,
		master_trainings.name AS
		training_name,
		training_sets.id AS training_set_id,
		training_sets.weight,
		training_sets.rep,
		training_sets.one_rep_max,
		training_sets.set_order
		FROM
		training_logs
		JOIN training_sets
		ON
		training_logs.id =training_sets.training_log_id
		JOIN master_trainings
		ON training_id=master_trainings.id
		WHERE training_logs.id=#{id}
		AND
		training_logs.status="ACT"
		ORDER BY
		training_sets.set_order
	</select>
	<select id="findLogListAsMessagePayloadNewer"
		resultMap="messagePayload">
		SELECT
		training_logs.id AS training_log_id,
		master_users.id AS
		user_id,
		master_users.icon_path,
		master_trainings.name AS training_name,
		training_sets.id AS training_set_id,
		training_sets.weight,
		training_sets.rep,
		proteins.user_id AS protein_user_id
		FROM
		(SELECT * FROM training_logs
		WHERE training_logs.status="ACT"
		ORDER BY registered DESC
		LIMIT 100)AS training_logs
		JOIN training_sets
		ON training_logs.id =
		training_sets.training_log_id
		JOIN master_trainings
		ON
		training_logs.training_id=master_trainings.id
		JOIN master_users
		ON
		training_logs.user_id=master_users.id
		LEFT OUTER JOIN proteins
		ON training_logs.id=proteins.training_log_id
		ORDER BY training_logs.registered
	</select>
	<select id="findLogAsMessagePayloadById" parameterType="int"
		resultMap="messagePayload">
		SELECT
		training_logs.id AS training_log_id,
		master_users.id AS
		user_id,
		master_users.icon_path,
		master_trainings.name AS training_name,
		training_sets.weight,
		training_sets.rep,
		proteins.user_id AS protein_user_id
		FROM
		training_logs
		JOIN training_sets
		ON
		training_logs.id = training_sets.training_log_id
		JOIN master_trainings
		ON training_logs.training_id=master_trainings.id
		JOIN master_users
		ON
		training_logs.user_id=master_users.id
		LEFT OUTER JOIN proteins
		ON training_logs.id=proteins.training_log_id
		WHERE training_logs.id=#{id}
	</select>


	<insert id="insert"
		parameterType="com.example.app.domain.TrainingLog"
		useGeneratedKeys="true" keyProperty="id">
		INSERT INTO training_logs
		(user_id, training_id, total_weight, one_rep_max,
		max_weight,latitude,logitude,registered)
		VALUES (#{user.id},
		#{training.id}, #{totalWeight}, #{oneRepMax},
		#{maxWeight},#{latitude},#{logitude},NOW())
	</insert>
	<update id="update"
		parameterType="com.example.app.domain.TrainingLog">
		UPDATE training_logs
		SET
		total_weight=#{totalWeight},one_rep_max=#{oneRepMax},max_weight=#{maxWeight},registered=#{registered}
		WHERE id=${id}
	</update>
	<update id="delete" parameterType="int">
		UPDATE training_logs
		SET
		training_logs.status="DEL"
		WHERE training_logs.id=${id}
	</update>

</mapper>
